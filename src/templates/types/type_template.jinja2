from typing import Optional, Union

from pydantic import BaseModel

import aiogrid
from aiogrid import types


class {{ title }}(BaseModel):
    """
    {{ description }}
    """
    {% if method_name %}
    def {{ method_name }}(
      self: "aiogrid.Bot",
      {% for argument in arguments -%}
      {% if  argument.description -%}
      # {{ argument.description }}
      {% endif -%}
      {% if argument.required -%}
      {{ argument.name }}: {% if argument.argument_type in import_types %}types.{% endif %}{{ argument.argument_type }},
      {% else -%}
      {{ argument.name }}: Optional[{% if argument.argument_type in import_types %}types.{% endif %}{{ argument.argument_type }}] = None,
      {% endif -%}
      {% endfor -%}
    ):
      ...
    {% else %}
    {% for argument in arguments -%}
    # {{ argument.description }}
    {% if argument.required -%}
    {{ argument.name }}: {% if argument.argument_type in import_types %}types.{% endif %}{{ argument.argument_type }}
    {% else -%}
    {{ argument.name }}: Optional[{% if argument.argument_type in import_types %}types.{% endif %}{{ argument.argument_type }}] = None
    {% endif %}
    {% endfor %}
    {% endif %}
